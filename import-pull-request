#! /usr/bin/env python

# This is free and unencumbered software released into the public domain.
# For more information: http://unlicense.org/

from __future__ import absolute_import, division, print_function, unicode_literals

import json
import os
import re
import subprocess
import sys

if sys.version_info >= (3,):
    from shlex import quote as shell_quote
    from urllib.request import urlopen
else:
    from pipes import quote as shell_quote
    from urllib2 import urlopen

class Die(Exception):
    pass

def main():
    try:
        _main()
    except Die as e:
        sys.stderr.write('Error: {}\n'.format(e))
        sys.exit(1)

def _main():
    prog_name, args = sys.argv[0], sys.argv[1:]

    if len(args) != 2:
        sys.stderr.write("\n"
                         "Usage: {} <github-pull-request-url> <new-local-branch>\n"
                         "\n"
                         "For more help: https://github.com/cakoose/import-pull-request\n"
                         "\n"
                         .format(prog_name))
        sys.exit(1)

    pr_url, new_local_branch = args

    if not pr_url.startswith("https://github.com/"):
        raise Die("Invalid pull request URL; "
                  "doesn't start with \"https://github.com/\": {!r}".format(pr_url))

    if not os.path.isdir(".git"):
        raise Die("Couldn't find \".git\" folder in current working directory.  "
                  "You must run this command from the top-level folder of a Git checkout.")

    local_changes = run_get_string("git", "status", "--porcelain")
    if len(local_changes) != 0:
        raise Die("You currently have local changes.  This script requires a clean repo.")

    local_branches = [l[2:] for l in run_get_string("git", "branch", "-l").splitlines()]
    if new_local_branch in local_branches:
        raise Die("Local branch {} already exists.".format(devq(new_local_branch)))

    target_repo, pr_num = parse_pr_url(pr_url)
    remote = pick_remote(target_repo)

    title, state, target_branch, source_repo, source_branch = fetch_pr_info(target_repo, pr_num)

    print(devq(title))
    source_repo_url = "git@github.com:{}.git".format(source_repo)
    run("git", "fetch", source_repo_url, source_branch+":"+new_local_branch)
    run("git", "branch", "-u", remote+"/"+target_branch, new_local_branch)
    run("git", "checkout", new_local_branch)

    last_commit_message = run_get_bytes("git", "show", "-s", "--format=%B", "HEAD")
    pr_ref = "Closes #{}".format(pr_num)
    run("git", "commit", "--amend", "-m", last_commit_message + pr_ref.encode('ascii'))

    print("Switched to local branch {}.".format(devq(new_local_branch)))
    if state != "open":
        print("WARNING: Pull request is marked {}.".format(devq(state)))

def run(*command):
    try:
        subprocess.check_output(command, stderr=subprocess.STDOUT)
    except subprocess.CalledProcessError as e:
        sys.stderr.write(e.output)
        raise Die("[Command failed: {}]".format(' '.join(map, shell_quote, command)))

PR_URL_MATCHER = re.compile("https://github.com/([-_A-Za-z0-9]+/[-_A-Za-z0-9]+)/pull/([0-9]+)")

def parse_pr_url(pr_url):
    m = PR_URL_MATCHER.match(pr_url)
    if m is None:
        raise Die("The given request URL doesn't match the expected pattern.")

    target_repo = m.group(1)
    pr_num = int(m.group(2))
    return target_repo, pr_num

def fetch_pr_info(target_repo, pr_num):
    api_pr_url = "https://api.github.com/repos/{}/pulls/{}".format(target_repo, pr_num)
    try:
        api_pr_page = urlopen(api_pr_url).read()
    except (OSError, IOError) as e:
        raise Die("Couldn't fetch page {}: {}".format(devq(api_pr_url), e))
    try:
        api_data = json.loads(api_pr_page.decode('utf-8'))
    except ValueError as e:
        raise Die("Couldn't parse page {}: {}".format(devq(api_pr_url), e))

    target_repo_from_page = api_data["base"]["repo"]["full_name"]
    pr_num_from_page = api_data["number"]

    if target_repo != target_repo_from_page:
        raise Die("Target repo mismatch.  Pull request URL has {}, but pull request page "
                  "contents has {}.".format(devq(target_repo), devq(target_repo_from_page)))
    if pr_num != pr_num_from_page:
        raise Die("Pull request number mismatch.  Pull request URL has {}, but pull request page "
                  "contents has {}.".format(pr_num, pr_num_from_page))

    title = api_data["title"]
    state = api_data["state"]
    target_branch = api_data["base"]["ref"]
    source_repo = api_data["head"]["repo"]["full_name"]
    source_branch = api_data["head"]["ref"]

    return title, state, target_branch, source_repo, source_branch

def run_get_string(*command):
    # TODO: use system default encoding?
    return run_get_bytes(*command).decode('utf-8')

def run_get_bytes(*command):
    return subprocess.check_output(command)

def pick_remote(target_repo):
    fetch = set()
    push = set()
    try:
        for line in run_get_string("git", "remote", "-v").splitlines():
            m = GIT_REMOTE_V_MATCHER.match(line)
            if m is None:
                raise Die("Couldn't parse line: {}".format(devq(line)))
            remote, repo_url, mode = m.group(1), m.group(2), m.group(3)

            if mode == 'fetch':
                target_set = fetch
            elif mode == 'push':
                target_set = push
            else:
                raise AssertionError(repr(mode))

            m = GITHUB_REPO_URL_MATCHER.match(repo_url)
            if m is not None and m.group(1) == target_repo:
                target_set.add(remote)
    except Die as e:
        raise Die("Unable to determine this repo's list of remotes: {}".format(e))

    both = fetch & push

    if 'origin' in both:
        return 'origin'

    if len(both) == 0:
        raise Die("This repo doesn't have any remotes that push and fetch from {}."
                  .format(devq(target_repo)))
    if len(both) > 1:
        raise Die("This repo has more than remote that pushes and fetches from {}: {}.  "
                  "Not sure which one to use.".format(devq(target_repo), devql(both)))
    return next(iter(both))

GIT_REMOTE_V_MATCHER = re.compile(r'([^ ]+)\t([^ ]+) \((fetch|push)\)$')
GITHUB_REPO_URL_MATCHER = re.compile(r'(?:git@github\.com:|https://github\.com/)(.*)\.git$')

def devq(s):
    return json.dumps(s)

def devql(l):
    assert len(l) > 0
    return ", ".join(map(devq, l))

REPO_HREF_MATCHER = re.compile(r'/([^/]+)/([^/]+)$')
COMMIT_HREF_MATCHER = re.compile(r'/([^/]+)/([^/]+)/commit/[0-9a-f]+$')
PULL_REQUEST_ID_MATCHER = re.compile(r'#[0-9]+$')

if __name__ == '__main__':
    main()
